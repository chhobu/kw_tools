<?php
// $Id$

// -------------------------------------------------
// ---------------- HOOKS --------------------------
// -------------------------------------------------
/**
 * Implements hook_init().
 */
function kw_tools_init() {
  $settings = variable_get('kw_blocks_settings', array());
  if (!empty($settings['collapse'])) {
    drupal_add_library('system', 'jquery.cookie');
  }
}


/**
 * Inmplements hook_menu().
 */
function kw_tools_menu() {
  $items = array();
  $items["kw/help"] = array(
    'title' => 'Kweb development help page',
    'page callback' =>  'kw_tools_help_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK
  );
  $items["kw/popup/%ctools_js/%"] = array(
    'title' => 'View node content in modal window',
    'page callback' => 'kw_tools_open_node_in_popup',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function kw_tools_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['modal'] = array(
      'label' => t('Modal'),
      'custom settings' => FALSE,
  );
}

/**
 * Implements hook_block_info().
 */
function kw_tools_block_info() {
  $blocks['kw_footer'] = array(
    'info' => t('kw_tools footer notes'),
    'weight' => 0,
    'status' => 1,
    'region' => 'footer',
    'cache' => DRUPAL_CACHE_PER_USER
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function kw_tools_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'kw_footer':
      $block = array(
        'subject' => t('Nota bene'),
        'content' => kw_tools_display_block_kwfooter(),
      );
      break;
  }
  return $block;
}

/**
 * Builds the content of kw_footer block
 */
function kw_tools_display_block_kwfooter() {
  global $user;
  $output = "";
  $separator = " | ";
  if ($user->uid == 0) {
    $output .= l(t("Not connected"), 'user/login');
  }
  else {
    $output .= t("Connected as !user", array("!user" => theme("username",
        array("account" => $user))));
  }
  $time = "<span class='icon calendar'>" . format_date(REQUEST_TIME, "custom", variable_get("date_format_just_the_date", "Y-m-d")) . "</span>";
  $hour = "<span class='icon clock'>" . format_date(REQUEST_TIME, "custom", variable_get("date_format_just_the_time", "H:i:s")) . "</span>";
  $output .= $separator . $time ." - ". $hour;
  $output .= $separator . "<a href='#Header' class='top icon'>" . t("Back to top") . "</a>";
  return $output;
}

/**
 * Implements hook_date_format_types().
 */
function kw_tools_date_format_types() {
  return array(
    'just_the_date' => t('Just the date'),
    'just_the_time' => t('Just the time')
  );
}

/**
 * Implements hook_date_formats().
 */
function kw_tools_date_formats() {
  return array(
    array(
      'type' => 'just_the_date',
      'format' => 'Y-m-d',
      'locales' => array('en', 'en-us'),
    ),
    array(
      'type' => 'just_the_date',
      'format' => 'd/m/Y',
      'locales' => array('fr'),
    ),
    array(
      'type' => 'just_the_time',
      'format' => 'H:i:s',
      'locales' => array(),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function kw_tools_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'block_admin_configure') {
    $settings = variable_get('kw_blocks_settings', array());
    $form['#submit'][] = 'kw_tools_form_block_submit';
    $form['kw_blocks'] = array(
      '#type' => 'fieldset',
      '#title' => t('Appearance and behaviors'),
      '#collapsible' => TRUE,
    );
    $options = array(
          0 => t('None.'),
          1 => t('Collapsible, expanded by default.'),
          2 => t('Collapsible, collapsed by default.')
    );
    $current_block_id = str_replace('_', '-', $form['module']['#value']) . '-' . str_replace('_', '-', $form['delta']['#value']);
    if (isset($settings['collapse'][$current_block_id]) && in_array($settings['collapse'][$current_block_id], array_keys($options))) {
      $default_value = $settings['collapse'][$current_block_id];
    }
    else {
      $default_value = 0;
    }
    $form['kw_blocks']['collapse_type'] = array(
      '#type' => 'radios',
      '#title' => t('Block collapse behavior'),
      '#options' => $options,
      '#default_value' => $default_value,
    );
    $form['kw_blocks']['additional_css_classes'] = array(
      '#type' => 'textfield',
      '#title' => t('Additional CSS classes'),
      '#default_value' => isset($settings['css'][$current_block_id]) ?
        implode(' ', $settings['css'][$current_block_id]) : '',
    );
  }
}

/**
 * Implements hook_preprocess_block().
 */
function kw_tools_preprocess_block(&$vars) {
  $block = $vars['block'];
  $block_id = str_replace('_', '-', $block->module) . '-' . str_replace('_', '-', $block->delta);
  $settings = variable_get('kw_blocks_settings', array());
  if (isset($settings['collapse'][$block_id])) {
    drupal_add_js(drupal_get_path('module', 'kw_tools') . '/js/kw_block.js', array(
      'every_page' => TRUE
    ));
    $vars['classes_array'][] = 'collapsible';
    if ($settings['collapse'][$block_id] == 2) {
      $vars['classes_array'][] = 'collapsed';
    }
    else {
      $vars['classes_array'][] = 'expanded';
    }
  }
  if (isset($settings['css'][$block_id])) {
    $vars['classes_array'] = array_merge($vars['classes_array'], $settings['css'][$block_id]);
  }
}

// -------------------------------------------------
// ---------------- SPECIFIC FUNCTIONS -------------
// -------------------------------------------------

function kw_tools_form_block_submit($form, $form_state) {
  $current_block_id = str_replace('_', '-', $form['module']['#value']) . '-' . str_replace('_', '-', $form['delta']['#value']);
  $settings = variable_get('kw_blocks_settings', array());
  if ($form_state['values']['collapse_type'] > 0) {
    $settings['collapse'][$current_block_id] = $form_state['values']['collapse_type'];
  }
  elseif (isset($settings['collapse'][$current_block_id])) {
    unset($settings['collapse'][$current_block_id]);
  }
  if (!empty($form_state['values']['additional_css_classes'])) {
    $settings['css'][$current_block_id] = explode(' ', trim(
      str_replace(array(',', ';'), ' ', $form_state['values']['additional_css_classes'])));
  }
  elseif (isset($settings['css'][$current_block_id])) {
    unset($settings['css'][$current_block_id]);
  }
  variable_set('kw_blocks_settings', $settings);
}

function kw_tools_add_modal_settings() {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();
  $sample_style = array(
      'kweb-modal' => array(
          'modalOptions' => array(
              'opacity' => .5,
              'background-color' => '#000',
          ),
          'closeImage' => ''
      ),
  );
  drupal_add_js($sample_style, 'setting');
}

/**
 * Ouvre des contenus dans une fenêtre modale
 */
function kw_tools_open_node_in_popup($js, $nid) {
  $node = node_load($nid);
  if (!$node) {
    drupal_not_found();
    return;
  }
  if (!node_access('view', $node)) {
    drupal_access_denied();
    return;
  }
  if ($js && module_exists('ctools')) {
    $type = node_type_load($node->type);
    $title = $type->name;
    $content = node_view($node, 'modal');
    ctools_include('modal');
    ctools_modal_render($title, $content);
  }
  else {
    drupal_goto('node/' . $nid);
  }
}

/**
 * Ajoute des données sur un champ de formulaire afin de le coordonner avec un widget jquery
 * @param unknown_type $field
 * @param unknown_type $extra_classes
 * @param unknown_type $params
 * @param unknown_type $form
 */
function kw_tools_add_special_widget($field, $extra_classes, $params, &$form) {
  $params_id = "kwwp-" . $field;
  if (!is_null($params) && count($params) > 0 && !isset($form[$params_id])) {
    $form[$field][$params_id] = array(
      "#type" => "hidden",
      "#value" => json_encode($params),
      "#attributes" => array("id" => $params_id)
    );
    $extra_classes[] = $params_id;
  }
  if (!is_null($extra_classes) && count($extra_classes) > 0) {
    foreach ($extra_classes as $class) {
      $form[$field]["#attributes"]["class"][] = $class;
    }
  }
}

/**
 * Regroupe des champs dans un groupe de type fieldset
 * @param unknown_type $name
 * @param unknown_type $title
 * @param unknown_type $fields
 * @param unknown_type $form
 * @param unknown_type $options
 */
function kw_tools_create_fieldset($name, $title, $fields, &$form, $options = array()) {
  $form[$name] = array_merge($options, array(
    "#type" => "fieldset",
    "#weight" => isset($form[current($fields)]["#weight"]) ? $form[current($fields)]["#weight"] : 0,
    "#title" => $title
  ));
  foreach($fields as $value) {
    $form[$name][$value] = $form[$value];
    $form[$value] = array("#language" => $form["language"]["#value"]);
  }
}

/**
 * Renvoie un nombre formaté
 * @param mixed $input, la chaîne à formater
 * @param array $options, peut contenir les options precision, decimal, thousands, suffix, prefix
 */
function kw_tools_number_format($input, $options = array()) {
  if (!is_numeric($input)) {
    return $input;
  }
  $precision = 0;
  $decimal = ",";
  $thousands = " ";
  $suffix = "";
  $prefix = "";
  if (isset($options["precision"])) {
    $precision = $options["precision"];
  }
  if (isset($options["decimal"])) {
    $decimal = $options["decimal"];
  }
  if (isset($options["thousands"])) {
    $thousands = $options["thousands"];
  }
  if (isset($options["suffix"])) {
    $suffix = $options["suffix"];
  }
  if (isset($options["prefix"])) {
    $prefix = $options["prefix"];
  }
  return $prefix.number_format($input, $precision, $decimal, $thousands).$suffix;
}

function kw_tools_duration($seconds_count) {
    $seconds = $seconds_count % 60;
    $minutes = floor($seconds_count/60) % 60;
    $hours   = floor($seconds_count/3600) % 24;
    $days = floor($seconds_count/(3600 * 24));
    $seconds = t('!sec s', array('!sec' => str_pad($seconds, 2, '0', STR_PAD_LEFT)));
    $minutes = t('!mn min', array('!mn' => $minutes)) . ' ';
    if($hours > 0) {
      $hours = t('!h h', array('!h' => $hours)) . ' ';
    }
    else {
      $hours = '';
    }
    if ($days > 0) {
      $days = format_plural($days, '1 day', '!days days', array('!days' => $days)) . ' ';
    }
    else {
      $days = '';
    }
    return $days . $hours . $minutes . $seconds;
}

/**
 * Renvoie un contenu différent si une variable est nulle (ou vide) ou non nulle
 * @param unknown_type $value
 * @param unknown_type $null
 * @param unknown_type $non_null
 */
function kw_tools_null_dispatcher($value, $null, $non_null) {
  if (is_null($value) || $value == "") {
    return $null;
  }
  else {
    return $non_null;
  }
}

/**
 * Affiche une page récapitulant certains points utiles à la programmation...
 * Enter description here ...
 */
function kw_tools_help_page() {
  $old_fields = field_read_fields();
  $fields = field_info_field_types();
  $widgets = field_info_widget_types();
  $formatters = field_info_formatter_types();
  // Field types
  $header = array(
    'type' => array('data' => t('Type')),
    'settings' => array('data' => t('Settings')),
    'instance_settings' => array('data' => t('Instance settings')),
    'widget' => array('data' => t('Widgets'))
  );
  $rows = array();
  foreach ($fields as $key => $field) {
    $settings = array();
    foreach ($field['settings'] as $setting => $value) {
      $settings[] = $setting . ' (<em>' . (is_array($value) ? print_r($value, TRUE) : $value) . '</em>)';
    }
    $instance_settings = array();
    foreach ($field['instance_settings'] as $instance_setting => $value) {
      $instance_settings[] = $instance_setting . ' (<em>' . (is_array($value) ? print_r($value, TRUE) : $value) . '</em>)';
    }
    $field_widgets = array();
    foreach ($widgets as $widget => $value) {
      if (in_array($key, $value["field types"])) {
        $field_widgets[] = $widget;
      }
    }
    $rows[] = array(
      'type' => array('data' => '<strong>' . $key . '</strong><br />' . $field['description']),
      'settings' => array('data' =>
         theme('item_list', array('items' => $settings, 'title' => NULL, 'type' => 'ul', 'attributes' => array()))
       ),
      'instance_settings' => array('data' =>
         theme('item_list', array('items' => $instance_settings, 'title' => NULL, 'type' => 'ul', 'attributes' => array()))
       ),
      'widgets' => array('data' =>
         theme('item_list', array('items' => $field_widgets, 'title' => NULL, 'type' => 'ul', 'attributes' => array()))
       )
    );
  }
  $html = '<h2>'. t('Field types') . '</h2>';
  $html .= theme('table', array('header' => $header, 'rows' => $rows));
  // Widgets info
  $html .= '<h2>' .t('Widget types') . '</h2>';
  $header = array(
    'widget' => array('data' => t('Widget')),
    'settings' => array('data' => t('Settings')),
    'fields' => array('data' => t('Field types')),
  );
  $rows = array();
  foreach ($widgets as $key => $widget) {
    $settings = array();
    foreach ($widget['settings'] as $setting => $value) {
      $settings[] = $setting . ' (' . (is_array($value) ? print_r($value, TRUE) : $value) . ')';
    }
    $rows[] = array(
      'widget' => array('data' => '<strong>' . $key . '</strong><br />' . $widget['label']),
      'settings' => array('data' => implode(', ', $settings)),
      'fields' => array('data' => theme('item_list', array('items' => $widget['field types'], 'type' => 'ul', 'title' => NULL, 'attributes' => array())))
    );
  }
  $html .= theme('table', array('header' => $header, 'rows' => $rows));
  // Formatters info
  $html .= '<h2>'. t('Formatters') . '</h2>';
  $header = array(
    'formatter' => array('data' => t('Formatter')),
    'settings' => array('data' => t('Settings')),
    'fields' => array('data' => t('Field types')),
  );
  $rows = array();
  foreach ($formatters as $key => $formatter) {
    $settings = array();
    foreach ($formatter['settings'] as $setting => $value) {
      $settings[] = $setting . ' (' . (is_array($value) ? print_r($value, TRUE) : $value) . ')';
    }
    $rows[] = array(
      'formatter' => array('data' => '<strong>' . $key . '</strong><br />' . $formatter['label']),
      'settings' => array('data' => implode(', ', $settings)),
      'fields' => array('data' => theme('item_list', array('items' => $formatter['field types'], 'type' => 'ul', 'title' => NULL, 'attributes' => array())))
    );
  }
  $html .= theme('table', array('header' => $header, 'rows' => $rows));
  // Permission info
  $html .= '<h2>' .t('Permission list') . '</h2>';
  $perms = array();
  foreach (module_list(FALSE, FALSE, TRUE) as $module) {
    if ($permissions = module_invoke($module, 'permission')) {
      asort($permissions);
      foreach ($permissions as $perm => $data) {
        $perms[] = '<strong>' . $perm . '</strong> (' . $data['title'] . ')';
      }
    }
  }
  sort($perms);
  $html .= theme("item_list", array("items" => $perms, "title" => NULL, "type" => "ul", "attributes" => array()));
  return $html;
}

/**
 * Création simultanée de champs et d'instances
 * @param unknown_type $fields
 */
function kw_tools_install_fields($fields, $node_type) {
  $old_fields = field_read_fields();
  foreach ($fields as $key => $field) {
    $new_field = array(
      'field_name' => 'field_' . $key,
      'type' => $field['type'],
    );
    if (isset($field['settings'])) {
      $new_field['settings'] = $field['settings'];
    }
    if (isset($field['entity_types'])) {
      $new_field['entity_types'] = $field['entity_types'];
    }
    if (isset($field['cardinality'])) {
      $new_field['cardinality'] = $field['cardinality'];
    }
    if (isset($field['translatable'])) {
      $new_field['translatable'] = $field['translatable'];
    }
    if (!isset($old_fields[$new_field['field_name']])) {
      field_create_field($new_field);
    }
    $instance = array(
      'field_name' => 'field_' . $key,
      'entity_type' => 'node',
      'label' => $field['label'],
      'bundle' => $node_type,
    );
    if (isset($field['instance'])) {
      $instance['settings'] = $field['instance'];
    }
    if (isset($field['description'])) {
      $instance['description'] = $field['description'];
    }
    if (isset($field['required'])) {
      $instance['required'] = $field['required'];
    }
    if (isset($field['default_value'])) {
      $instance['default_value'] = $field['default_value'];
    }
    if (isset($field['default_value_function'])) {
      $instance['default_value_function'] = $field['default_value_function'];
    }
    if (isset($field['widget'])) {
      $instance['widget'] = $field['widget'];
    }
    if (isset($field['display'])) {
      $instance['display'] = $field['display'];
    }
    field_create_instance($instance);
  }
}

// -------------------------------------------------
// --------------- HELPER FUNCTIONS ----------------
// -------------------------------------------------
function array_diff_assoc_recursive($array1, $array2) {
  foreach($array1 as $key => $value) {
    if(is_array($value)) {
      if(!isset($array2[$key])) {
        $difference[$key] = $value;
      }
      elseif(!is_array($array2[$key])) {
        $difference[$key] = $value;
      }
      else {
        $new_diff = array_diff_assoc_recursive($value, $array2[$key]);
        if($new_diff != FALSE) {
          $difference[$key] = $new_diff;
        }
      }
    }
    elseif(!isset($array2[$key]) || $array2[$key] != $value) {
      $difference[$key] = $value;
    }
  }
  return !isset($difference) ? array() : $difference;
}

// -------------------------------------------------
// ---------------- DEBUG FUNCTIONS ----------------
// -------------------------------------------------

/**
 * Affiche de façon élégante la valeur d'une variable
 * @param mixed $var : la variable à analyser
 * @param boolean $die : si TRUE, le script s'arrête automatiquement
 * @param boolean $alert : si TRUE, le contenu est affiché sous forme d'une alerte javascript
 */
function __debug($var, $die = TRUE, $alert = FALSE) {
  if ($alert) {
    echo "<script type='text/javascript'>alert(print_r($var, TRUE))</script>";
  }
  else {
    if (is_string($var)) {
      $var = htmlentities($var);
    }
    echo "<pre>" . print_r($var, TRUE) . "</pre>";
  }
  if ($die) {
    die();
  }
}